"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@otplib";
exports.ids = ["vendor-chunks/@otplib"];
exports.modules = {

/***/ "(rsc)/./node_modules/@otplib/core/index.js":
/*!********************************************!*\
  !*** ./node_modules/@otplib/core/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * @otplib/core\n *\n * @author Gerald Yeo <contact@fusedthought.com>\n * @version: 12.0.1\n * @license: MIT\n **/ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction objectValues(value) {\n    return Object.keys(value).map((key)=>value[key]);\n}\n(function(HashAlgorithms) {\n    HashAlgorithms[\"SHA1\"] = \"sha1\";\n    HashAlgorithms[\"SHA256\"] = \"sha256\";\n    HashAlgorithms[\"SHA512\"] = \"sha512\";\n})(exports.HashAlgorithms || (exports.HashAlgorithms = {}));\nconst HASH_ALGORITHMS = objectValues(exports.HashAlgorithms);\n(function(KeyEncodings) {\n    KeyEncodings[\"ASCII\"] = \"ascii\";\n    KeyEncodings[\"BASE64\"] = \"base64\";\n    KeyEncodings[\"HEX\"] = \"hex\";\n    KeyEncodings[\"LATIN1\"] = \"latin1\";\n    KeyEncodings[\"UTF8\"] = \"utf8\";\n})(exports.KeyEncodings || (exports.KeyEncodings = {}));\nconst KEY_ENCODINGS = objectValues(exports.KeyEncodings);\n(function(Strategy) {\n    Strategy[\"HOTP\"] = \"hotp\";\n    Strategy[\"TOTP\"] = \"totp\";\n})(exports.Strategy || (exports.Strategy = {}));\nconst STRATEGY = objectValues(exports.Strategy);\nconst createDigestPlaceholder = ()=>{\n    throw new Error(\"Please provide an options.createDigest implementation.\");\n};\nfunction isTokenValid(value) {\n    return /^(\\d+)$/.test(value);\n}\nfunction padStart(value, maxLength, fillString) {\n    if (value.length >= maxLength) {\n        return value;\n    }\n    const padding = Array(maxLength + 1).join(fillString);\n    return `${padding}${value}`.slice(-1 * maxLength);\n}\nfunction keyuri(options) {\n    const tmpl = `otpauth://${options.type}/{labelPrefix}:{accountName}?secret={secret}{query}`;\n    const params = [];\n    if (STRATEGY.indexOf(options.type) < 0) {\n        throw new Error(`Expecting options.type to be one of ${STRATEGY.join(\", \")}. Received ${options.type}.`);\n    }\n    if (options.type === \"hotp\") {\n        if (options.counter == null || typeof options.counter !== \"number\") {\n            throw new Error('Expecting options.counter to be a number when options.type is \"hotp\".');\n        }\n        params.push(`&counter=${options.counter}`);\n    }\n    if (options.type === \"totp\" && options.step) {\n        params.push(`&period=${options.step}`);\n    }\n    if (options.digits) {\n        params.push(`&digits=${options.digits}`);\n    }\n    if (options.algorithm) {\n        params.push(`&algorithm=${options.algorithm.toUpperCase()}`);\n    }\n    if (options.issuer) {\n        params.push(`&issuer=${encodeURIComponent(options.issuer)}`);\n    }\n    return tmpl.replace(\"{labelPrefix}\", encodeURIComponent(options.issuer || options.accountName)).replace(\"{accountName}\", encodeURIComponent(options.accountName)).replace(\"{secret}\", options.secret).replace(\"{query}\", params.join(\"\"));\n}\nclass OTP {\n    constructor(defaultOptions = {}){\n        this._defaultOptions = Object.freeze({\n            ...defaultOptions\n        });\n        this._options = Object.freeze({});\n    }\n    create(defaultOptions = {}) {\n        return new OTP(defaultOptions);\n    }\n    clone(defaultOptions = {}) {\n        const instance = this.create({\n            ...this._defaultOptions,\n            ...defaultOptions\n        });\n        instance.options = this._options;\n        return instance;\n    }\n    get options() {\n        return Object.freeze({\n            ...this._defaultOptions,\n            ...this._options\n        });\n    }\n    set options(options) {\n        this._options = Object.freeze({\n            ...this._options,\n            ...options\n        });\n    }\n    allOptions() {\n        return this.options;\n    }\n    resetOptions() {\n        this._options = Object.freeze({});\n    }\n}\nfunction hotpOptionsValidator(options) {\n    if (typeof options.createDigest !== \"function\") {\n        throw new Error(\"Expecting options.createDigest to be a function.\");\n    }\n    if (typeof options.createHmacKey !== \"function\") {\n        throw new Error(\"Expecting options.createHmacKey to be a function.\");\n    }\n    if (typeof options.digits !== \"number\") {\n        throw new Error(\"Expecting options.digits to be a number.\");\n    }\n    if (!options.algorithm || HASH_ALGORITHMS.indexOf(options.algorithm) < 0) {\n        throw new Error(`Expecting options.algorithm to be one of ${HASH_ALGORITHMS.join(\", \")}. Received ${options.algorithm}.`);\n    }\n    if (!options.encoding || KEY_ENCODINGS.indexOf(options.encoding) < 0) {\n        throw new Error(`Expecting options.encoding to be one of ${KEY_ENCODINGS.join(\", \")}. Received ${options.encoding}.`);\n    }\n}\nconst hotpCreateHmacKey = (algorithm, secret, encoding)=>{\n    return Buffer.from(secret, encoding).toString(\"hex\");\n};\nfunction hotpDefaultOptions() {\n    const options = {\n        algorithm: exports.HashAlgorithms.SHA1,\n        createHmacKey: hotpCreateHmacKey,\n        createDigest: createDigestPlaceholder,\n        digits: 6,\n        encoding: exports.KeyEncodings.ASCII\n    };\n    return options;\n}\nfunction hotpOptions(opt) {\n    const options = {\n        ...hotpDefaultOptions(),\n        ...opt\n    };\n    hotpOptionsValidator(options);\n    return Object.freeze(options);\n}\nfunction hotpCounter(counter) {\n    const hexCounter = counter.toString(16);\n    return padStart(hexCounter, 16, \"0\");\n}\nfunction hotpDigestToToken(hexDigest, digits) {\n    const digest = Buffer.from(hexDigest, \"hex\");\n    const offset = digest[digest.length - 1] & 0xf;\n    const binary = (digest[offset] & 0x7f) << 24 | (digest[offset + 1] & 0xff) << 16 | (digest[offset + 2] & 0xff) << 8 | digest[offset + 3] & 0xff;\n    const token = binary % Math.pow(10, digits);\n    return padStart(String(token), digits, \"0\");\n}\nfunction hotpDigest(secret, counter, options) {\n    const hexCounter = hotpCounter(counter);\n    const hmacKey = options.createHmacKey(options.algorithm, secret, options.encoding);\n    return options.createDigest(options.algorithm, hmacKey, hexCounter);\n}\nfunction hotpToken(secret, counter, options) {\n    const hexDigest = options.digest || hotpDigest(secret, counter, options);\n    return hotpDigestToToken(hexDigest, options.digits);\n}\nfunction hotpCheck(token, secret, counter, options) {\n    if (!isTokenValid(token)) {\n        return false;\n    }\n    const systemToken = hotpToken(secret, counter, options);\n    return token === systemToken;\n}\nfunction hotpKeyuri(accountName, issuer, secret, counter, options) {\n    return keyuri({\n        algorithm: options.algorithm,\n        digits: options.digits,\n        type: exports.Strategy.HOTP,\n        accountName,\n        counter,\n        issuer,\n        secret\n    });\n}\nclass HOTP extends OTP {\n    create(defaultOptions = {}) {\n        return new HOTP(defaultOptions);\n    }\n    allOptions() {\n        return hotpOptions(this.options);\n    }\n    generate(secret, counter) {\n        return hotpToken(secret, counter, this.allOptions());\n    }\n    check(token, secret, counter) {\n        return hotpCheck(token, secret, counter, this.allOptions());\n    }\n    verify(opts) {\n        if (typeof opts !== \"object\") {\n            throw new Error(\"Expecting argument 0 of verify to be an object\");\n        }\n        return this.check(opts.token, opts.secret, opts.counter);\n    }\n    keyuri(accountName, issuer, secret, counter) {\n        return hotpKeyuri(accountName, issuer, secret, counter, this.allOptions());\n    }\n}\nfunction parseWindowBounds(win) {\n    if (typeof win === \"number\") {\n        return [\n            Math.abs(win),\n            Math.abs(win)\n        ];\n    }\n    if (Array.isArray(win)) {\n        const [past, future] = win;\n        if (typeof past === \"number\" && typeof future === \"number\") {\n            return [\n                Math.abs(past),\n                Math.abs(future)\n            ];\n        }\n    }\n    throw new Error(\"Expecting options.window to be an number or [number, number].\");\n}\nfunction totpOptionsValidator(options) {\n    hotpOptionsValidator(options);\n    parseWindowBounds(options.window);\n    if (typeof options.epoch !== \"number\") {\n        throw new Error(\"Expecting options.epoch to be a number.\");\n    }\n    if (typeof options.step !== \"number\") {\n        throw new Error(\"Expecting options.step to be a number.\");\n    }\n}\nconst totpPadSecret = (secret, encoding, minLength)=>{\n    const currentLength = secret.length;\n    const hexSecret = Buffer.from(secret, encoding).toString(\"hex\");\n    if (currentLength < minLength) {\n        const newSecret = new Array(minLength - currentLength + 1).join(hexSecret);\n        return Buffer.from(newSecret, \"hex\").slice(0, minLength).toString(\"hex\");\n    }\n    return hexSecret;\n};\nconst totpCreateHmacKey = (algorithm, secret, encoding)=>{\n    switch(algorithm){\n        case exports.HashAlgorithms.SHA1:\n            return totpPadSecret(secret, encoding, 20);\n        case exports.HashAlgorithms.SHA256:\n            return totpPadSecret(secret, encoding, 32);\n        case exports.HashAlgorithms.SHA512:\n            return totpPadSecret(secret, encoding, 64);\n        default:\n            throw new Error(`Expecting algorithm to be one of ${HASH_ALGORITHMS.join(\", \")}. Received ${algorithm}.`);\n    }\n};\nfunction totpDefaultOptions() {\n    const options = {\n        algorithm: exports.HashAlgorithms.SHA1,\n        createDigest: createDigestPlaceholder,\n        createHmacKey: totpCreateHmacKey,\n        digits: 6,\n        encoding: exports.KeyEncodings.ASCII,\n        epoch: Date.now(),\n        step: 30,\n        window: 0\n    };\n    return options;\n}\nfunction totpOptions(opt) {\n    const options = {\n        ...totpDefaultOptions(),\n        ...opt\n    };\n    totpOptionsValidator(options);\n    return Object.freeze(options);\n}\nfunction totpCounter(epoch, step) {\n    return Math.floor(epoch / step / 1000);\n}\nfunction totpToken(secret, options) {\n    const counter = totpCounter(options.epoch, options.step);\n    return hotpToken(secret, counter, options);\n}\nfunction totpEpochsInWindow(epoch, direction, deltaPerEpoch, numOfEpoches) {\n    const result = [];\n    if (numOfEpoches === 0) {\n        return result;\n    }\n    for(let i = 1; i <= numOfEpoches; i++){\n        const delta = direction * i * deltaPerEpoch;\n        result.push(epoch + delta);\n    }\n    return result;\n}\nfunction totpEpochAvailable(epoch, step, win) {\n    const bounds = parseWindowBounds(win);\n    const delta = step * 1000;\n    return {\n        current: epoch,\n        past: totpEpochsInWindow(epoch, -1, delta, bounds[0]),\n        future: totpEpochsInWindow(epoch, 1, delta, bounds[1])\n    };\n}\nfunction totpCheck(token, secret, options) {\n    if (!isTokenValid(token)) {\n        return false;\n    }\n    const systemToken = totpToken(secret, options);\n    return token === systemToken;\n}\nfunction totpCheckByEpoch(epochs, token, secret, options) {\n    let position = null;\n    epochs.some((epoch, idx)=>{\n        if (totpCheck(token, secret, {\n            ...options,\n            epoch\n        })) {\n            position = idx + 1;\n            return true;\n        }\n        return false;\n    });\n    return position;\n}\nfunction totpCheckWithWindow(token, secret, options) {\n    if (totpCheck(token, secret, options)) {\n        return 0;\n    }\n    const epochs = totpEpochAvailable(options.epoch, options.step, options.window);\n    const backward = totpCheckByEpoch(epochs.past, token, secret, options);\n    if (backward !== null) {\n        return backward * -1;\n    }\n    return totpCheckByEpoch(epochs.future, token, secret, options);\n}\nfunction totpTimeUsed(epoch, step) {\n    return Math.floor(epoch / 1000) % step;\n}\nfunction totpTimeRemaining(epoch, step) {\n    return step - totpTimeUsed(epoch, step);\n}\nfunction totpKeyuri(accountName, issuer, secret, options) {\n    return keyuri({\n        algorithm: options.algorithm,\n        digits: options.digits,\n        step: options.step,\n        type: exports.Strategy.TOTP,\n        accountName,\n        issuer,\n        secret\n    });\n}\nclass TOTP extends HOTP {\n    create(defaultOptions = {}) {\n        return new TOTP(defaultOptions);\n    }\n    allOptions() {\n        return totpOptions(this.options);\n    }\n    generate(secret) {\n        return totpToken(secret, this.allOptions());\n    }\n    checkDelta(token, secret) {\n        return totpCheckWithWindow(token, secret, this.allOptions());\n    }\n    check(token, secret) {\n        const delta = this.checkDelta(token, secret);\n        return typeof delta === \"number\";\n    }\n    verify(opts) {\n        if (typeof opts !== \"object\") {\n            throw new Error(\"Expecting argument 0 of verify to be an object\");\n        }\n        return this.check(opts.token, opts.secret);\n    }\n    timeRemaining() {\n        const options = this.allOptions();\n        return totpTimeRemaining(options.epoch, options.step);\n    }\n    timeUsed() {\n        const options = this.allOptions();\n        return totpTimeUsed(options.epoch, options.step);\n    }\n    keyuri(accountName, issuer, secret) {\n        return totpKeyuri(accountName, issuer, secret, this.allOptions());\n    }\n}\nfunction authenticatorOptionValidator(options) {\n    totpOptionsValidator(options);\n    if (typeof options.keyDecoder !== \"function\") {\n        throw new Error(\"Expecting options.keyDecoder to be a function.\");\n    }\n    if (options.keyEncoder && typeof options.keyEncoder !== \"function\") {\n        throw new Error(\"Expecting options.keyEncoder to be a function.\");\n    }\n}\nfunction authenticatorDefaultOptions() {\n    const options = {\n        algorithm: exports.HashAlgorithms.SHA1,\n        createDigest: createDigestPlaceholder,\n        createHmacKey: totpCreateHmacKey,\n        digits: 6,\n        encoding: exports.KeyEncodings.HEX,\n        epoch: Date.now(),\n        step: 30,\n        window: 0\n    };\n    return options;\n}\nfunction authenticatorOptions(opt) {\n    const options = {\n        ...authenticatorDefaultOptions(),\n        ...opt\n    };\n    authenticatorOptionValidator(options);\n    return Object.freeze(options);\n}\nfunction authenticatorEncoder(secret, options) {\n    return options.keyEncoder(secret, options.encoding);\n}\nfunction authenticatorDecoder(secret, options) {\n    return options.keyDecoder(secret, options.encoding);\n}\nfunction authenticatorGenerateSecret(numberOfBytes, options) {\n    const key = options.createRandomBytes(numberOfBytes, options.encoding);\n    return authenticatorEncoder(key, options);\n}\nfunction authenticatorToken(secret, options) {\n    return totpToken(authenticatorDecoder(secret, options), options);\n}\nfunction authenticatorCheckWithWindow(token, secret, options) {\n    return totpCheckWithWindow(token, authenticatorDecoder(secret, options), options);\n}\nclass Authenticator extends TOTP {\n    create(defaultOptions = {}) {\n        return new Authenticator(defaultOptions);\n    }\n    allOptions() {\n        return authenticatorOptions(this.options);\n    }\n    generate(secret) {\n        return authenticatorToken(secret, this.allOptions());\n    }\n    checkDelta(token, secret) {\n        return authenticatorCheckWithWindow(token, secret, this.allOptions());\n    }\n    encode(secret) {\n        return authenticatorEncoder(secret, this.allOptions());\n    }\n    decode(secret) {\n        return authenticatorDecoder(secret, this.allOptions());\n    }\n    generateSecret(numberOfBytes = 10) {\n        return authenticatorGenerateSecret(numberOfBytes, this.allOptions());\n    }\n}\nexports.Authenticator = Authenticator;\nexports.HASH_ALGORITHMS = HASH_ALGORITHMS;\nexports.HOTP = HOTP;\nexports.KEY_ENCODINGS = KEY_ENCODINGS;\nexports.OTP = OTP;\nexports.STRATEGY = STRATEGY;\nexports.TOTP = TOTP;\nexports.authenticatorCheckWithWindow = authenticatorCheckWithWindow;\nexports.authenticatorDecoder = authenticatorDecoder;\nexports.authenticatorDefaultOptions = authenticatorDefaultOptions;\nexports.authenticatorEncoder = authenticatorEncoder;\nexports.authenticatorGenerateSecret = authenticatorGenerateSecret;\nexports.authenticatorOptionValidator = authenticatorOptionValidator;\nexports.authenticatorOptions = authenticatorOptions;\nexports.authenticatorToken = authenticatorToken;\nexports.createDigestPlaceholder = createDigestPlaceholder;\nexports.hotpCheck = hotpCheck;\nexports.hotpCounter = hotpCounter;\nexports.hotpCreateHmacKey = hotpCreateHmacKey;\nexports.hotpDefaultOptions = hotpDefaultOptions;\nexports.hotpDigestToToken = hotpDigestToToken;\nexports.hotpKeyuri = hotpKeyuri;\nexports.hotpOptions = hotpOptions;\nexports.hotpOptionsValidator = hotpOptionsValidator;\nexports.hotpToken = hotpToken;\nexports.isTokenValid = isTokenValid;\nexports.keyuri = keyuri;\nexports.objectValues = objectValues;\nexports.padStart = padStart;\nexports.totpCheck = totpCheck;\nexports.totpCheckByEpoch = totpCheckByEpoch;\nexports.totpCheckWithWindow = totpCheckWithWindow;\nexports.totpCounter = totpCounter;\nexports.totpCreateHmacKey = totpCreateHmacKey;\nexports.totpDefaultOptions = totpDefaultOptions;\nexports.totpEpochAvailable = totpEpochAvailable;\nexports.totpKeyuri = totpKeyuri;\nexports.totpOptions = totpOptions;\nexports.totpOptionsValidator = totpOptionsValidator;\nexports.totpPadSecret = totpPadSecret;\nexports.totpTimeRemaining = totpTimeRemaining;\nexports.totpTimeUsed = totpTimeUsed;\nexports.totpToken = totpToken;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@otplib/core/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@otplib/plugin-crypto/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@otplib/plugin-crypto/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * @otplib/plugin-crypto\n *\n * @author Gerald Yeo <contact@fusedthought.com>\n * @version: 12.0.1\n * @license: MIT\n **/ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction _interopDefault(ex) {\n    return ex && typeof ex === \"object\" && \"default\" in ex ? ex[\"default\"] : ex;\n}\nvar crypto = _interopDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nconst createDigest = (algorithm, hmacKey, counter)=>{\n    const hmac = crypto.createHmac(algorithm, Buffer.from(hmacKey, \"hex\"));\n    const digest = hmac.update(Buffer.from(counter, \"hex\")).digest();\n    return digest.toString(\"hex\");\n};\nconst createRandomBytes = (size, encoding)=>{\n    return crypto.randomBytes(size).toString(encoding);\n};\nexports.createDigest = createDigest;\nexports.createRandomBytes = createRandomBytes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG90cGxpYi9wbHVnaW4tY3J5cHRvL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7RUFNRSxHQUNGO0FBRUFBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBRTdELFNBQVNDLGdCQUFpQkMsRUFBRTtJQUFJLE9BQU8sTUFBUSxPQUFPQSxPQUFPLFlBQWEsYUFBYUEsS0FBTUEsRUFBRSxDQUFDLFVBQVUsR0FBR0E7QUFBSTtBQUVqSCxJQUFJQyxTQUFTRixnQkFBZ0JHLG1CQUFPQSxDQUFDO0FBRXJDLE1BQU1DLGVBQWUsQ0FBQ0MsV0FBV0MsU0FBU0M7SUFDeEMsTUFBTUMsT0FBT04sT0FBT08sVUFBVSxDQUFDSixXQUFXSyxPQUFPQyxJQUFJLENBQUNMLFNBQVM7SUFDL0QsTUFBTU0sU0FBU0osS0FBS0ssTUFBTSxDQUFDSCxPQUFPQyxJQUFJLENBQUNKLFNBQVMsUUFBUUssTUFBTTtJQUM5RCxPQUFPQSxPQUFPRSxRQUFRLENBQUM7QUFDekI7QUFDQSxNQUFNQyxvQkFBb0IsQ0FBQ0MsTUFBTUM7SUFDL0IsT0FBT2YsT0FBT2dCLFdBQVcsQ0FBQ0YsTUFBTUYsUUFBUSxDQUFDRztBQUMzQztBQUVBbkIsb0JBQW9CLEdBQUdNO0FBQ3ZCTix5QkFBeUIsR0FBR2lCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvamVjdC8uL25vZGVfbW9kdWxlcy9Ab3RwbGliL3BsdWdpbi1jcnlwdG8vaW5kZXguanM/OWJmNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBvdHBsaWIvcGx1Z2luLWNyeXB0b1xuICpcbiAqIEBhdXRob3IgR2VyYWxkIFllbyA8Y29udGFjdEBmdXNlZHRob3VnaHQuY29tPlxuICogQHZlcnNpb246IDEyLjAuMVxuICogQGxpY2Vuc2U6IE1JVFxuICoqL1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQgKGV4KSB7IHJldHVybiAoZXggJiYgKHR5cGVvZiBleCA9PT0gJ29iamVjdCcpICYmICdkZWZhdWx0JyBpbiBleCkgPyBleFsnZGVmYXVsdCddIDogZXg7IH1cblxudmFyIGNyeXB0byA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdjcnlwdG8nKSk7XG5cbmNvbnN0IGNyZWF0ZURpZ2VzdCA9IChhbGdvcml0aG0sIGhtYWNLZXksIGNvdW50ZXIpID0+IHtcbiAgY29uc3QgaG1hYyA9IGNyeXB0by5jcmVhdGVIbWFjKGFsZ29yaXRobSwgQnVmZmVyLmZyb20oaG1hY0tleSwgJ2hleCcpKTtcbiAgY29uc3QgZGlnZXN0ID0gaG1hYy51cGRhdGUoQnVmZmVyLmZyb20oY291bnRlciwgJ2hleCcpKS5kaWdlc3QoKTtcbiAgcmV0dXJuIGRpZ2VzdC50b1N0cmluZygnaGV4Jyk7XG59O1xuY29uc3QgY3JlYXRlUmFuZG9tQnl0ZXMgPSAoc2l6ZSwgZW5jb2RpbmcpID0+IHtcbiAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyhzaXplKS50b1N0cmluZyhlbmNvZGluZyk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZURpZ2VzdCA9IGNyZWF0ZURpZ2VzdDtcbmV4cG9ydHMuY3JlYXRlUmFuZG9tQnl0ZXMgPSBjcmVhdGVSYW5kb21CeXRlcztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9pbnRlcm9wRGVmYXVsdCIsImV4IiwiY3J5cHRvIiwicmVxdWlyZSIsImNyZWF0ZURpZ2VzdCIsImFsZ29yaXRobSIsImhtYWNLZXkiLCJjb3VudGVyIiwiaG1hYyIsImNyZWF0ZUhtYWMiLCJCdWZmZXIiLCJmcm9tIiwiZGlnZXN0IiwidXBkYXRlIiwidG9TdHJpbmciLCJjcmVhdGVSYW5kb21CeXRlcyIsInNpemUiLCJlbmNvZGluZyIsInJhbmRvbUJ5dGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@otplib/plugin-crypto/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@otplib/plugin-thirty-two/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@otplib/plugin-thirty-two/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * @otplib/plugin-thirty-two\n *\n * @author Gerald Yeo <contact@fusedthought.com>\n * @version: 12.0.1\n * @license: MIT\n **/ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction _interopDefault(ex) {\n    return ex && typeof ex === \"object\" && \"default\" in ex ? ex[\"default\"] : ex;\n}\nvar thirtyTwo = _interopDefault(__webpack_require__(/*! thirty-two */ \"(rsc)/./node_modules/thirty-two/lib/thirty-two/index.js\"));\nconst keyDecoder = (encodedSecret, encoding)=>{\n    return thirtyTwo.decode(encodedSecret).toString(encoding);\n};\nconst keyEncoder = (secret, encoding)=>{\n    return thirtyTwo.encode(Buffer.from(secret, encoding).toString(\"ascii\")).toString().replace(/=/g, \"\");\n};\nexports.keyDecoder = keyDecoder;\nexports.keyEncoder = keyEncoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG90cGxpYi9wbHVnaW4tdGhpcnR5LXR3by9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0VBTUUsR0FDRjtBQUVBQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUU3RCxTQUFTQyxnQkFBaUJDLEVBQUU7SUFBSSxPQUFPLE1BQVEsT0FBT0EsT0FBTyxZQUFhLGFBQWFBLEtBQU1BLEVBQUUsQ0FBQyxVQUFVLEdBQUdBO0FBQUk7QUFFakgsSUFBSUMsWUFBWUYsZ0JBQWdCRyxtQkFBT0EsQ0FBQztBQUV4QyxNQUFNQyxhQUFhLENBQUNDLGVBQWVDO0lBQ2pDLE9BQU9KLFVBQVVLLE1BQU0sQ0FBQ0YsZUFBZUcsUUFBUSxDQUFDRjtBQUNsRDtBQUNBLE1BQU1HLGFBQWEsQ0FBQ0MsUUFBUUo7SUFDMUIsT0FBT0osVUFBVVMsTUFBTSxDQUFDQyxPQUFPQyxJQUFJLENBQUNILFFBQVFKLFVBQVVFLFFBQVEsQ0FBQyxVQUFVQSxRQUFRLEdBQUdNLE9BQU8sQ0FBQyxNQUFNO0FBQ3BHO0FBRUFoQixrQkFBa0IsR0FBR007QUFDckJOLGtCQUFrQixHQUFHVyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb2plY3QvLi9ub2RlX21vZHVsZXMvQG90cGxpYi9wbHVnaW4tdGhpcnR5LXR3by9pbmRleC5qcz83ODZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG90cGxpYi9wbHVnaW4tdGhpcnR5LXR3b1xuICpcbiAqIEBhdXRob3IgR2VyYWxkIFllbyA8Y29udGFjdEBmdXNlZHRob3VnaHQuY29tPlxuICogQHZlcnNpb246IDEyLjAuMVxuICogQGxpY2Vuc2U6IE1JVFxuICoqL1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQgKGV4KSB7IHJldHVybiAoZXggJiYgKHR5cGVvZiBleCA9PT0gJ29iamVjdCcpICYmICdkZWZhdWx0JyBpbiBleCkgPyBleFsnZGVmYXVsdCddIDogZXg7IH1cblxudmFyIHRoaXJ0eVR3byA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCd0aGlydHktdHdvJykpO1xuXG5jb25zdCBrZXlEZWNvZGVyID0gKGVuY29kZWRTZWNyZXQsIGVuY29kaW5nKSA9PiB7XG4gIHJldHVybiB0aGlydHlUd28uZGVjb2RlKGVuY29kZWRTZWNyZXQpLnRvU3RyaW5nKGVuY29kaW5nKTtcbn07XG5jb25zdCBrZXlFbmNvZGVyID0gKHNlY3JldCwgZW5jb2RpbmcpID0+IHtcbiAgcmV0dXJuIHRoaXJ0eVR3by5lbmNvZGUoQnVmZmVyLmZyb20oc2VjcmV0LCBlbmNvZGluZykudG9TdHJpbmcoJ2FzY2lpJykpLnRvU3RyaW5nKCkucmVwbGFjZSgvPS9nLCAnJyk7XG59O1xuXG5leHBvcnRzLmtleURlY29kZXIgPSBrZXlEZWNvZGVyO1xuZXhwb3J0cy5rZXlFbmNvZGVyID0ga2V5RW5jb2RlcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9pbnRlcm9wRGVmYXVsdCIsImV4IiwidGhpcnR5VHdvIiwicmVxdWlyZSIsImtleURlY29kZXIiLCJlbmNvZGVkU2VjcmV0IiwiZW5jb2RpbmciLCJkZWNvZGUiLCJ0b1N0cmluZyIsImtleUVuY29kZXIiLCJzZWNyZXQiLCJlbmNvZGUiLCJCdWZmZXIiLCJmcm9tIiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@otplib/plugin-thirty-two/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@otplib/preset-default/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@otplib/preset-default/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * @otplib/preset-default\n *\n * @author Gerald Yeo <contact@fusedthought.com>\n * @version: 12.0.1\n * @license: MIT\n **/ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar pluginCrypto = __webpack_require__(/*! @otplib/plugin-crypto */ \"(rsc)/./node_modules/@otplib/plugin-crypto/index.js\");\nvar pluginThirtyTwo = __webpack_require__(/*! @otplib/plugin-thirty-two */ \"(rsc)/./node_modules/@otplib/plugin-thirty-two/index.js\");\nvar core = __webpack_require__(/*! @otplib/core */ \"(rsc)/./node_modules/@otplib/core/index.js\");\nconst hotp = new core.HOTP({\n    createDigest: pluginCrypto.createDigest\n});\nconst totp = new core.TOTP({\n    createDigest: pluginCrypto.createDigest\n});\nconst authenticator = new core.Authenticator({\n    createDigest: pluginCrypto.createDigest,\n    createRandomBytes: pluginCrypto.createRandomBytes,\n    keyDecoder: pluginThirtyTwo.keyDecoder,\n    keyEncoder: pluginThirtyTwo.keyEncoder\n});\nexports.authenticator = authenticator;\nexports.hotp = hotp;\nexports.totp = totp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG90cGxpYi9wcmVzZXQtZGVmYXVsdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0VBTUUsR0FDRjtBQUVBQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUU3RCxJQUFJQyxlQUFlQyxtQkFBT0EsQ0FBQztBQUMzQixJQUFJQyxrQkFBa0JELG1CQUFPQSxDQUFDO0FBQzlCLElBQUlFLE9BQU9GLG1CQUFPQSxDQUFDO0FBRW5CLE1BQU1HLE9BQU8sSUFBSUQsS0FBS0UsSUFBSSxDQUFDO0lBQ3pCQyxjQUFjTixhQUFhTSxZQUFZO0FBQ3pDO0FBQ0EsTUFBTUMsT0FBTyxJQUFJSixLQUFLSyxJQUFJLENBQUM7SUFDekJGLGNBQWNOLGFBQWFNLFlBQVk7QUFDekM7QUFDQSxNQUFNRyxnQkFBZ0IsSUFBSU4sS0FBS08sYUFBYSxDQUFDO0lBQzNDSixjQUFjTixhQUFhTSxZQUFZO0lBQ3ZDSyxtQkFBbUJYLGFBQWFXLGlCQUFpQjtJQUNqREMsWUFBWVYsZ0JBQWdCVSxVQUFVO0lBQ3RDQyxZQUFZWCxnQkFBZ0JXLFVBQVU7QUFDeEM7QUFFQWYscUJBQXFCLEdBQUdXO0FBQ3hCWCxZQUFZLEdBQUdNO0FBQ2ZOLFlBQVksR0FBR1MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0BvdHBsaWIvcHJlc2V0LWRlZmF1bHQvaW5kZXguanM/NTA2NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBvdHBsaWIvcHJlc2V0LWRlZmF1bHRcbiAqXG4gKiBAYXV0aG9yIEdlcmFsZCBZZW8gPGNvbnRhY3RAZnVzZWR0aG91Z2h0LmNvbT5cbiAqIEB2ZXJzaW9uOiAxMi4wLjFcbiAqIEBsaWNlbnNlOiBNSVRcbiAqKi9cbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIHBsdWdpbkNyeXB0byA9IHJlcXVpcmUoJ0BvdHBsaWIvcGx1Z2luLWNyeXB0bycpO1xudmFyIHBsdWdpblRoaXJ0eVR3byA9IHJlcXVpcmUoJ0BvdHBsaWIvcGx1Z2luLXRoaXJ0eS10d28nKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnQG90cGxpYi9jb3JlJyk7XG5cbmNvbnN0IGhvdHAgPSBuZXcgY29yZS5IT1RQKHtcbiAgY3JlYXRlRGlnZXN0OiBwbHVnaW5DcnlwdG8uY3JlYXRlRGlnZXN0XG59KTtcbmNvbnN0IHRvdHAgPSBuZXcgY29yZS5UT1RQKHtcbiAgY3JlYXRlRGlnZXN0OiBwbHVnaW5DcnlwdG8uY3JlYXRlRGlnZXN0XG59KTtcbmNvbnN0IGF1dGhlbnRpY2F0b3IgPSBuZXcgY29yZS5BdXRoZW50aWNhdG9yKHtcbiAgY3JlYXRlRGlnZXN0OiBwbHVnaW5DcnlwdG8uY3JlYXRlRGlnZXN0LFxuICBjcmVhdGVSYW5kb21CeXRlczogcGx1Z2luQ3J5cHRvLmNyZWF0ZVJhbmRvbUJ5dGVzLFxuICBrZXlEZWNvZGVyOiBwbHVnaW5UaGlydHlUd28ua2V5RGVjb2RlcixcbiAga2V5RW5jb2RlcjogcGx1Z2luVGhpcnR5VHdvLmtleUVuY29kZXJcbn0pO1xuXG5leHBvcnRzLmF1dGhlbnRpY2F0b3IgPSBhdXRoZW50aWNhdG9yO1xuZXhwb3J0cy5ob3RwID0gaG90cDtcbmV4cG9ydHMudG90cCA9IHRvdHA7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwbHVnaW5DcnlwdG8iLCJyZXF1aXJlIiwicGx1Z2luVGhpcnR5VHdvIiwiY29yZSIsImhvdHAiLCJIT1RQIiwiY3JlYXRlRGlnZXN0IiwidG90cCIsIlRPVFAiLCJhdXRoZW50aWNhdG9yIiwiQXV0aGVudGljYXRvciIsImNyZWF0ZVJhbmRvbUJ5dGVzIiwia2V5RGVjb2RlciIsImtleUVuY29kZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@otplib/preset-default/index.js\n");

/***/ })

};
;